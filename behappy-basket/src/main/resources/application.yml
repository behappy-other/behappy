server:
  servlet:
    context-path: /behappy-basket
  port: 8084
# 数据源
# mybaits-plus配置
mybatis-plus:
  mapper-locations: classpath:/mapper/*.xml
  global-config:
    banner: false
    db-config:
      table-underline: true
      logic-delete-value: 1
      logic-not-delete-value: 0
  configuration:
    map-underscore-to-camel-case: true
    #开启sql日志
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
spring:
  redis:
    database: 0
    host: 127.0.0.1
    port: 6379
    ssl: false
    timeout: 500ms
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: root
    password: root
    url: jdbc:mysql://localhost:3306/behappy-basket?allowMultiQueries=true&useSSL=false&useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&zeroDateTimeBehavior=convertToNull&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&nullCatalogMeansCurrent=true
  cloud:
    #使用Spring Cloud LoadBalancer
    loadbalancer:
      ribbon:
        enabled: false
    sentinel:
      # https://github.com/alibaba/spring-cloud-alibaba/issues/2322
      filter:
        enabled: true
      transport:
        # sentinel dashboard的访问地址，根据上面准备工作中启动的实例配置
        dashboard: localhost:8858
        # port是在应用对应的机器上启动一个 Http Server，该 Server 会与 Sentinel 控制台做交互。
        # 比如 Sentinel 控制台添加了1个限流规则，会把规则数据 push 给这个 Http Server 接收，Http Server
        # 默认这个server端口是从8719开始，如果被占就+1从8720一直到找到空闲的端口为止。
        port: 8719
  #      datasource:
  #        # 限流规则
  #        flow:
  #          nacos:
  #            # nacos的访问地址，，根据上面准备工作中启动的实例配置
  #            server-addr: ${spring.cloud.nacos.server-addr}
  #            # nacos中存储规则的dataId,这里对于dataId使用了${spring.application.name}变量，这样可以根据应用名来区分不同的规则配置
  #            dataId: ${spring.application.name}-${spring.profiles.active}-sentinel-flow
  #            namespace: ${spring.cloud.nacos.config.namespace}
  #            username: ${spring.cloud.nacos.username}
  #            password: ${spring.cloud.nacos.password}
  #            data-type: json
  #            # 该参数是spring cloud alibaba升级到0.2.2之后增加的配置，用来定义存储的规则类型。所有的规则类型可查看枚举类【org.springframework.cloud.alibaba.sentinel.datasource.RuleType】
  #            rule-type: flow
  #        # 限流规则
  #        degrade:
  #          nacos:
  #            server-addr: ${spring.cloud.nacos.server-addr}
  #            dataId: ${spring.application.name}-${spring.profiles.active}-sentinel-degrade
  #            namespace: ${spring.cloud.nacos.config.namespace}
  #            username: ${spring.cloud.nacos.username}
  #            password: ${spring.cloud.nacos.password}
  #            data-type: json
  #            rule-type: degrade
  #        # 热点参数限流规则
  #        param-flow:
  #          nacos:
  #            server-addr: ${spring.cloud.nacos.server-addr}
  #            dataId: ${spring.application.name}-${spring.profiles.active}-sentinel-param-flow
  #            namespace: ${spring.cloud.nacos.config.namespace}
  #            username: ${spring.cloud.nacos.username}
  #            password: ${spring.cloud.nacos.password}
  #            data-type: json
  #            rule-type: param-flow
  #        # 系统自适应限流
  #        system:
  #          nacos:
  #            server-addr: ${spring.cloud.nacos.server-addr}
  #            dataId: ${spring.application.name}-${spring.profiles.active}-sentinel-system
  #            namespace: ${spring.cloud.nacos.config.namespace}
  #            username: ${spring.cloud.nacos.username}
  #            password: ${spring.cloud.nacos.password}
  #            data-type: json
  #            rule-type: system
  #        # 黑白名单配置
  #        authority:
  #          nacos:
  #            server-addr: ${spring.cloud.nacos.server-addr}
  #            dataId: ${spring.application.name}-${spring.profiles.active}-sentinel-authority
  #            namespace: ${spring.cloud.nacos.config.namespace}
  #            username: ${spring.cloud.nacos.username}
  #            password: ${spring.cloud.nacos.password}
  #            data-type: json
  #            rule-type: authority
feign:
  sentinel:
    enabled: true
  # feign的httpclient是由添加判断的(feignautoconfi->@conditionalonclass)
  okhttp:
    enabled: true
  compression:
    request:
      enabled: true
    response:
      enabled: true
redisson:
  # 线程池数量
  threads: 16
  # Netty线程池数量
  nettyThreads: 32
  # 传输模式
  transportMode: "NIO"
  # 单节点配置
  singleServerConfig:
    # 客户端名称
    clientName: springboot-redisson-demo
    # 最小空闲连接数
    connectionMinimumIdleSize: 32
    # 连接池大小
    connectionPoolSize: 64
    # 连接空闲超时，单位：毫秒
    idleConnectionTimeout: 10000
    # 命令等待超时，单位：毫秒
    timeout: 3000
    # 如果尝试在此限制之内发送成功，则开始启用 timeout 计时。
    retryAttempts: 3
    # 命令重试发送时间间隔，单位：毫秒
    retryInterval: 1500
    # 发布和订阅连接的最小空闲连接数
    subscriptionConnectionMinimumIdleSize: 1
    # 发布和订阅连接池大小
    subscriptionConnectionPoolSize: 50
    # 单个连接最大订阅数量
    subscriptionsPerConnection: 5
    # DNS监测时间间隔，单位：毫秒
    dnsMonitoringInterval: 5000
snowflake:
  machine-id: 1
  data-center-id: 1
